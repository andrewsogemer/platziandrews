// ============================================
// EJEMPLOS B√ÅSICOS DE MANIPULACI√ìN DEL DOM
// ============================================

console.log("üöÄ Iniciando ejemplos de manipulaci√≥n del DOM");

// ============================================
// 1. SELECCI√ìN Y MODIFICACI√ìN DE ELEMENTOS
// ============================================

/**
 * M√âTODOS DE SELECCI√ìN:
 * - getElementById(): Selecciona por ID (m√°s r√°pido)
 * - querySelector(): Selecciona el primer elemento que coincida con el selector CSS
 * - querySelectorAll(): Selecciona todos los elementos que coincidan
 * - getElementsByClassName(): Selecciona por clase
 * - getElementsByTagName(): Selecciona por etiqueta
 */

function cambiarTexto() {
    // Selecci√≥n por ID
    const parrafo = document.getElementById('parrafo1');
    
    // Modificaci√≥n del contenido
    parrafo.textContent = '¬°Texto modificado con JavaScript!';
    parrafo.style.color = 'blue';
    parrafo.style.fontWeight = 'bold';
    
    console.log('‚úÖ Texto cambiado exitosamente');
}

function cambiarColor() {
    // Selecci√≥n con querySelector
    const parrafo = document.querySelector('#parrafo1');
    
    // Array de colores para alternar
    const colores = ['red', 'green', 'purple', 'orange', 'blue'];
    const colorAleatorio = colores[Math.floor(Math.random() * colores.length)];
    
    parrafo.style.color = colorAleatorio;
    parrafo.textContent = `Color cambiado a: ${colorAleatorio}`;
    
    console.log('üé® Color cambiado a:', colorAleatorio);
}

// ============================================
// 2. CREACI√ìN Y ELIMINACI√ìN DE ELEMENTOS
// ============================================

let contadorElementos = 0;

function agregarElemento() {
    // Crear un nuevo elemento
    const nuevoElemento = document.createElement('div');
    
    // Agregar contenido y clases
    nuevoElemento.textContent = `Elemento din√°mico #${++contadorElementos}`;
    nuevoElemento.className = 'list-item';
    
    // Agregar atributos
    nuevoElemento.setAttribute('data-id', contadorElementos);
    nuevoElemento.setAttribute('title', `Elemento creado el ${new Date().toLocaleTimeString()}`);
    
    // Insertar en el DOM
    const contenedor = document.getElementById('lista-dinamica');
    contenedor.appendChild(nuevoElemento);
    
    console.log('‚ûï Elemento agregado:', nuevoElemento);
}

function eliminarElemento() {
    const contenedor = document.getElementById('lista-dinamica');
    const elementos = contenedor.querySelectorAll('.list-item');
    
    if (elementos.length > 0) {
        // Eliminar el √∫ltimo elemento
        const ultimoElemento = elementos[elementos.length - 1];
        contenedor.removeChild(ultimoElemento);
        contadorElementos--;
        
        console.log('‚ûñ Elemento eliminado');
    } else {
        console.log('‚ö†Ô∏è No hay elementos para eliminar');
    }
}

// ============================================
// 3. MANIPULACI√ìN DE CLASES CSS
// ============================================

function agregarClase() {
    const elemento = document.getElementById('elemento-clases');
    
    // Agregar una clase
    elemento.classList.add('highlight');
    
    console.log('‚ú® Clase "highlight" agregada');
}

function quitarClase() {
    const elemento = document.getElementById('elemento-clases');
    
    // Quitar una clase
    elemento.classList.remove('highlight');
    
    console.log('üóëÔ∏è Clase "highlight" removida');
}

function toggleClase() {
    const elemento = document.getElementById('elemento-clases');
    
    // Alternar una clase (agregar si no existe, quitar si existe)
    elemento.classList.toggle('highlight');
    
    const tieneClase = elemento.classList.contains('highlight');
    console.log('üîÑ Clase alternada. Tiene highlight:', tieneClase);
}

// ============================================
// 4. EVENTOS DEL DOM
// ============================================

// Agregar eventos cuando el DOM est√© completamente cargado
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM completamente cargado');
    
    // Evento de clic
    const areaEvento = document.getElementById('area-evento');
    const infoEvento = document.getElementById('info-evento');
    
    areaEvento.addEventListener('click', function(evento) {
        infoEvento.textContent = `Clic en: ${evento.target.tagName} - Coordenadas: (${evento.clientX}, ${evento.clientY})`;
        infoEvento.style.color = 'green';
        
        console.log('üñ±Ô∏è Evento de clic detectado:', evento);
    });
    
    // Evento de mouseover
    areaEvento.addEventListener('mouseover', function() {
        this.style.backgroundColor = '#e3f2fd';
        console.log('üñ±Ô∏è Mouse sobre el √°rea');
    });
    
    // Evento de mouseout
    areaEvento.addEventListener('mouseout', function() {
        this.style.backgroundColor = '';
        console.log('üñ±Ô∏è Mouse fuera del √°rea');
    });
    
    // Evento de doble clic
    areaEvento.addEventListener('dblclick', function() {
        infoEvento.textContent = '¬°Doble clic detectado!';
        infoEvento.style.color = 'red';
        console.log('üñ±Ô∏è Doble clic detectado');
    });
});

// ============================================
// 5. FORMULARIOS Y VALIDACI√ìN
// ============================================

document.addEventListener('DOMContentLoaded', function() {
    const formulario = document.getElementById('mi-formulario');
    const mensajeFormulario = document.getElementById('mensaje-formulario');
    
    formulario.addEventListener('submit', function(evento) {
        // Prevenir el env√≠o por defecto
        evento.preventDefault();
        
        // Obtener valores de los campos
        const nombre = document.getElementById('nombre').value.trim();
        const email = document.getElementById('email').value.trim();
        
        // Validaci√≥n b√°sica
        if (nombre === '') {
            mostrarMensaje('Por favor ingresa tu nombre', 'error');
            return;
        }
        
        if (email === '' || !email.includes('@')) {
            mostrarMensaje('Por favor ingresa un email v√°lido', 'error');
            return;
        }
        
        // Si todo est√° bien
        mostrarMensaje(`¬°Formulario enviado! Nombre: ${nombre}, Email: ${email}`, 'exito');
        
        // Limpiar formulario
        formulario.reset();
        
        console.log('üìù Formulario enviado:', { nombre, email });
    });
    
    function mostrarMensaje(texto, tipo) {
        mensajeFormulario.textContent = texto;
        mensajeFormulario.style.color = tipo === 'error' ? 'red' : 'green';
        mensajeFormulario.style.fontWeight = 'bold';
    }
});

// ============================================
// 6. NAVEGACI√ìN DEL DOM
// ============================================

function navegarDOM() {
    const contenedor = document.getElementById('navegacion');
    const infoNavegacion = document.getElementById('info-navegacion');
    
    let informacion = '<h4>Informaci√≥n de Navegaci√≥n del DOM:</h4>';
    
    // Navegaci√≥n hacia abajo (hijos)
    const parrafo = contenedor.querySelector('p');
    informacion += `<p><strong>P√°rrafo padre:</strong> ${parrafo.textContent}</p>`;
    
    const lista = contenedor.querySelector('ul');
    const elementosLista = lista.children;
    informacion += `<p><strong>Elementos de la lista:</strong> ${elementosLista.length}</p>`;
    
    // Navegaci√≥n hacia arriba (padres)
    const primerLi = lista.firstElementChild;
    const padreDelLi = primerLi.parentElement;
    informacion += `<p><strong>Padre del primer li:</strong> ${padreDelLi.tagName}</p>`;
    
    // Navegaci√≥n lateral (hermanos)
    const span = contenedor.querySelector('span');
    const hermanoAnterior = span.previousElementSibling;
    const hermanoSiguiente = span.nextElementSibling;
    
    informacion += `<p><strong>Hermano anterior del span:</strong> ${hermanoAnterior ? hermanoAnterior.tagName : 'Ninguno'}</p>`;
    informacion += `<p><strong>Hermano siguiente del span:</strong> ${hermanoSiguiente ? hermanoSiguiente.tagName : 'Ninguno'}</p>`;
    
    // Informaci√≥n del nodo
    informacion += `<p><strong>Tipo de nodo del contenedor:</strong> ${contenedor.nodeType}</p>`;
    informacion += `<p><strong>N√∫mero de hijos directos:</strong> ${contenedor.children.length}</p>`;
    
    infoNavegacion.innerHTML = informacion;
    
    console.log('üß≠ Navegaci√≥n del DOM completada');
}

// ============================================
// 7. EJEMPLOS ADICIONALES DE MANIPULACI√ìN
// ============================================

// Ejemplo: Modificar atributos
function modificarAtributos() {
    const imagen = document.createElement('img');
    imagen.src = 'https://via.placeholder.com/150';
    imagen.alt = 'Imagen de ejemplo';
    imagen.title = 'Imagen creada din√°micamente';
    
    console.log('üñºÔ∏è Atributos de imagen:', {
        src: imagen.src,
        alt: imagen.alt,
        title: imagen.title
    });
}

// Ejemplo: Trabajar con datasets
function usarDataAttributes() {
    const elemento = document.createElement('div');
    elemento.dataset.usuarioId = '12345';
    elemento.dataset.rol = 'admin';
    elemento.dataset.fechaCreacion = new Date().toISOString();
    
    console.log('üìä Datasets:', elemento.dataset);
}

// Ejemplo: Clonar elementos
function clonarElemento() {
    const original = document.querySelector('.list-item');
    if (original) {
        const clon = original.cloneNode(true);
        clon.textContent = 'Elemento clonado';
        document.body.appendChild(clon);
        
        console.log('üîÑ Elemento clonado');
    }
}

// Ejemplo: Reemplazar elementos
function reemplazarElemento() {
    const elementoViejo = document.querySelector('.list-item');
    if (elementoViejo) {
        const elementoNuevo = document.createElement('div');
        elementoNuevo.textContent = 'Elemento reemplazado';
        elementoNuevo.className = 'list-item';
        
        elementoViejo.parentNode.replaceChild(elementoNuevo, elementoViejo);
        
        console.log('üîÑ Elemento reemplazado');
    }
}

// ============================================
// 8. UTILIDADES Y MEJORES PR√ÅCTICAS
// ============================================

// Funci√≥n para crear elementos de forma m√°s eficiente
function crearElementoEficiente(tag, contenido, clases = [], atributos = {}) {
    const elemento = document.createElement(tag);
    elemento.textContent = contenido;
    
    // Agregar clases
    if (clases.length > 0) {
        elemento.classList.add(...clases);
    }
    
    // Agregar atributos
    Object.entries(atributos).forEach(([key, value]) => {
        elemento.setAttribute(key, value);
    });
    
    return elemento;
}

// Funci√≥n para limpiar contenido de forma segura
function limpiarContenidoSeguro(contenedor) {
    while (contenedor.firstChild) {
        contenedor.removeChild(contenedor.firstChild);
    }
}

// Funci√≥n para verificar si un elemento existe
function elementoExiste(selector) {
    return document.querySelector(selector) !== null;
}

// Funci√≥n para obtener elementos de forma segura
function obtenerElementoSeguro(selector) {
    const elemento = document.querySelector(selector);
    if (!elemento) {
        console.warn(`‚ö†Ô∏è Elemento no encontrado: ${selector}`);
        return null;
    }
    return elemento;
}

// ============================================
// INICIALIZACI√ìN Y DEMOSTRACI√ìN
// ============================================

// Ejecutar algunos ejemplos cuando se carga la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéØ Ejemplos de manipulaci√≥n del DOM listos');
    
    // Crear algunos elementos de ejemplo usando nuestras utilidades
    const ejemploElemento = crearElementoEficiente(
        'div', 
        'Elemento creado con utilidad', 
        ['list-item'], 
        { 'data-ejemplo': 'true' }
    );
    
    // Verificar si existen elementos
    console.log('Elemento existe:', elementoExiste('#parrafo1'));
    
    // Obtener elemento de forma segura
    const elementoSeguro = obtenerElementoSeguro('#parrafo1');
    if (elementoSeguro) {
        console.log('‚úÖ Elemento obtenido de forma segura');
    }
});

console.log('üìö Todos los ejemplos de manipulaci√≥n del DOM han sido cargados');


/* 
üìö Explicaci√≥n de los Ejemplos de Manipulaci√≥n del DOM
1. Selecci√≥n y Modificaci√≥n de Elementos
getElementById(): M√©todo m√°s r√°pido para seleccionar por ID
querySelector(): Selecciona el primer elemento que coincida con un selector CSS
textContent: Modifica el contenido de texto de un elemento
style: Permite modificar estilos CSS directamente
2. Creaci√≥n y Eliminaci√≥n de Elementos
createElement(): Crea nuevos elementos HTML
appendChild(): Agrega elementos al DOM
removeChild(): Elimina elementos del DOM
setAttribute(): Agrega atributos personalizados
3. Manipulaci√≥n de Clases CSS
classList.add(): Agrega clases CSS
classList.remove(): Quita clases CSS
classList.toggle(): Alterna clases (agrega si no existe, quita si existe)
classList.contains(): Verifica si un elemento tiene una clase
4. Eventos del DOM
addEventListener(): Agrega eventos a elementos
Eventos comunes: click, mouseover, mouseout, dblclick
preventDefault(): Previene el comportamiento por defecto
event.target: Accede al elemento que dispar√≥ el evento
5. Formularios y Validaci√≥n
Validaci√≥n de campos: Verificaci√≥n de contenido y formato
form.reset(): Limpia formularios
Manejo de eventos submit: Procesa env√≠o de formularios
6. Navegaci√≥n del DOM
parentElement: Accede al elemento padre
children: Obtiene elementos hijos
nextElementSibling: Elemento hermano siguiente
previousElementSibling: Elemento hermano anterior
7. Ejemplos Adicionales
Modificaci√≥n de atributos: src, alt, title
Data attributes: Almacenamiento de datos personalizados
Clonaci√≥n: cloneNode()
Reemplazo: replaceChild()
8. Utilidades y Mejores Pr√°cticas
Funciones helper: Creaci√≥n eficiente de elementos
Verificaci√≥n segura: Comprobar existencia de elementos
Limpieza segura: Eliminar contenido sin errores
üöÄ C√≥mo usar estos ejemplos:
Abre el archivo index.html en tu navegador
Abre la consola del navegador (F12) para ver los logs
Interact√∫a con los botones para ver cada ejemplo en acci√≥n
Experimenta modificando el c√≥digo para aprender m√°s
üí° Conceptos Clave del DOM:
DOM: Representaci√≥n en memoria de la estructura HTML
Nodos: Cada elemento, texto, comentario es un nodo
√Årbol DOM: Estructura jer√°rquica padre-hijo
Manipulaci√≥n: Cambiar, agregar, eliminar elementos din√°micamente
Estos ejemplos te dar√°n una base s√≥lida para entender c√≥mo manipular el DOM en JavaScript. ¬°Puedes experimentar con cada funci√≥n y ver c√≥mo funciona en tiempo real!



*/